#!/usr/bin/python
# encoding=utf8
'''
Created on 2018年7月30日

@author: jyang
'''
from aliyun.util.excelUtil import read
from aliyun.usermgt.usermgtUtil import *
from aliyun.usermgt import *
from usersrc import *
import json
ingoreCode = ["330100001100", "330193000000", "330195000000", '330150000000']
validCodes = ['330182005700', '330106000000', '330100000803', '330102005500', '330105005500', '330182000000', '330103005300', '330127005300', '330199005200', '330198000300', '330185001500', '330100000800', '330182005400', '330100001100', '330106000404', '330106000407', '330100000702', '330110005500', '330105000300', '330100000700', '330100000701', '330110001500', '330183001500', '330193000000', '330195000000', '330183005300', '330198005200', '330110005400', '330150005300', '330197000000', '330199000000', '330102000401', '330109006000', '330183005400', '330109000400', '330108005100', '330102000402', '330185005500', '330122000100', '\\N', '330102000405', '330199005100', '330122001400', '330104005400', '330127000000', '330199005500', '330102005200', '330103000300', '330186000000', '330195005100', '330104005200', '330100000403', '330100000402', '330100000401', '330100000400', '330100000407', '330106005700', '330100000405', '330100000404', '330110005700', '330189000400', '330100000408', '330183006100', '330183000400', '330183000401', '330110005300', '330182005600', '330105000000', '330193005700', '330199005400', '330102000404', '330185005800', '330102005400', '330103005400', '330122000700', '330122000701', '330110005800', '330109000000', '330185001200', '330182005200', '330108000000', '330105000406', '330105005200', '330100000000', '330197005400', '330196005200', '330100000406', '330193006100', '330193006800', '330106005800', '330105000405', '330183000000', '330100001301', '330105000408', '330197005300', '330104000300', '330105000407', '330100001300', '330105000402', '330105000403', '330183005500', '330100000301', '330122005100', '330185000000', '330182005500', '330110000800', '330109005300', '330127005700', '330100000901', '330106005200', '330105000401', '330109005100', '330102000403', '330182005300', '330186002200', '330199005600', '330182001100', '330108000300', '330193005100', '330127000300', '330110000300', '330193005300', '330109005900', '330105005600', '330186002300', '330100000902', '330100001204', '330103005000', '330106005600', '330106005000', '330102000300', '330100001201', '330185005300', '330109005600', '330102000000', '330199005000', '330122000400', '330183000300', '330104000000', '330182005100', '330196000300', '330127005100', '330122005300', '330100001205', '330127001500', '330108005200', '330193006300', '330150005100', '330122000000', '330193005000', '330110000100', '330104005500', '330109005500', '330100000107', '330105005300', '330100000105', '330100000102', '330100000103', '330100000100', '330100000101', '330193006400', '330106005900', '330185005700', '330109005200', '330186002100', '330197005200', '330110005600', '330104000407', '330104000405', '330150000000', '330183005600', '330102005000', '330122005000', '330185000300', '330106000300', '330127005400', '330104000409', '330100001501', '330100001500', '330100001503', '330100001502', '330122000300', '330100001504', '330102000406', '330150000300', '330104005300', '330196000000', '330195000300', '330197000300', '330100000903', '330110001200', '330100001401', '330122005400', '330110000600', '330108000403', '330105005400', '330182000300', '330103005200', '330109005700', '330127005200', '330199005300', '330100000900', '330193006600', '330185000400', '330110000400', '330193005200', '330193005600', '330100000601', '330127005800', '330100000603', '330100000602', '330103005500', '330182001500', '330122005200', '330198000000', '330100000802', '330100000801', '330127005600', '330109001100', '330183005200', '330198005100', '330150005200', '330127001200', '330185005600', '330110000000', '330100000600', '330182000400', '330104005600', '330100000300', '330185005400', '330100000302', '330100000303', '330196005100', '330103000409', '330108005300', '330197005100', '330103000401', '330103000402', '330103000403', '330103000404', '330102005300', '330103000406', '330103000407', '330105005000', '330186000300', '330185005200', '330127005500', '330127000400', '330100001400', '330100001202', '330100001402', '330100001403', '330100001404', '330100001405', '330106005400', '330183001200', '330109001500', '330100001200', '330104005000', '330103000000', '330109000100'];
def installOrgs():
    orgTables = read(r"/Users/jyang/Desktop/info/绩效考核部门sys_dept1.xlsx", "Select d_sys_dept")
#     print orgTables
    orgMap = {};
    for row in orgTables[1:]:
        name = row[1]
        code = row[0]
        parentCode = row[7]
        if code not in validCodes:
            print "invalid code ", name , "invalid code", code
            continue
        if code in ingoreCode:
            print "fobid code ", name , "fobid code", code
            continue
        orgMap[code] = {"code":code,"name":name,"parentCode":parentCode, "children":[]}

    rootNodes = []
    for code in orgMap:
        if orgMap.has_key(orgMap[code]["parentCode"]):
            orgMap[orgMap[code]["parentCode"]]["children"].append(orgMap[code]);
        else:
            rootNodes.append(code)
            print "not found parent",  code, orgMap[code]["name"], orgMap[code]["parentCode"]
#     print orgMap[rootNodes[0]]
#     for rootNode in rootNodes:
    existOrgs = []
    createNodeRe(orgMap["330100000000"], 1, existOrgs)
    print len(orgMap)
    print len(set(existOrgs))
    return  orgMap

def createNodeRe(nodeObj, parentId, existOrgs):
    name = nodeObj["name"];
    code = nodeObj["code"];
    desc = ""
    owner = ""
    rid = parentId
    print "createOrg", name
    print createOrg(HOSTNAME, APPNAME, name, code, owner, desc, rid)
    res = getOrg(HOSTNAME, APPNAME, code);
#     print "res",res
    resObj = json.loads(res);
    if resObj["code"] == "SUCCESS":
        existOrgs.append(code)
        myid =  resObj["data"]["id"]
        nodeObj["nid"] = myid
        if len(nodeObj["children"]) > 0:
            for childNode in nodeObj["children"]:
                #{"code":"SUCCESS","data":{"id":2,"name":"tt","code":"tt","desc":"","lft":1,"rgt":2,"status":null,"gmt_created":"2018-08-07 15:55:49","is_deleted":0,"gmt_modified":"2018-08-07 15:55:49","owner":0}}
                createNodeRe(childNode, myid, existOrgs);
    else:
        print "get id error", nodeObj["name"]

if __name__ == '__main__':
    desc = ""
    owner = ""
    createOrg(HOSTNAME, APPNAME, u"普通成员", "330100XINHAODENGC", owner, desc, 237)
#     print readFile(u"/Users/jyang/Desktop/警员信息/警员信息.csv", mode="r")
#     userTables = read(r"/Users/jyang/Desktop/info/绩效考核部门sys_dept.xlsx", "Select d_sys_dept")
#     installOrgs()

    