#!/usr/bin/python
# encoding=utf8
ss = """
async (req, data) => {\n    const {\n          redisKey,\n        isExist\n        } = req.ganjiang_cache\n    if (isExist) {\n        const cacheVal = await ganjiang.redis.get(redisKey)\n        // console.log('cacheVal===', cacheVal)\n        try {\n            // console.log(\"444\")\n            const val = JSON.parse(cacheVal)\n            return val\n        } catch (err) {\n            throw err;\n        }\n    }\n    let result = {\n        value: 0, rate: 0, state: true,\n        info:\n        {\n            公交: 0, 公交载客量: 0, 公交比值: 0, 公交状态: true,\n            地铁里程: 0, 地铁客运量: 0, 地铁比值: 0, 地铁状态: true,\n            出租车: 0, 出租车客运量: 0, 出租车比值: 0, 出租车状态: true,\n            公共自行车: 0, 公共自行车租用量: 0, 公共自行车比值: 0, 公共自行车状态: true,\n            水上巴士: 0, 水上巴士客运量: 0, 水上巴士比值: 0, 水上巴士状态: true\n        }\n    }\n  let avg_sum = 0;\n    //调用getScreenType 返回匹配类型\n    const healthType = await ganjiang.request('/getScreenType', {\n        grid_id: req.query.grid_id\n    });\n    if (healthType.screen_type === \"admin_area\") {\n        // console.log(data)\n        data.forEach(v => {\n          if(v.traffic_key === 'BUS_COUNT'){\n            result.info.公交 = v.traffic_value;\n          }\n          if(v.traffic_key === 'BUS_CXL_JR'){\n            result.info.公交载客量 = v.traffic_value;\n            result.info.公交比值 = v.rate;\n            result.info.公交状态 = v.rate > 0;\n            result.info.公交比值 = Math.abs( v.rate );\n            result.value += v.traffic_value;\n            avg_sum += v.traffic_value_avg;\n          }\n          if(v.traffic_key === 'SUBWAY_QC'){\n            result.info.地铁里程 = v.traffic_value;\n          }\n          if(v.traffic_key === 'SUBWAY_XWLL_W_TODAY'){\n            result.info.地铁客运量 = v.traffic_value;\n            result.info.地铁比值 = v.rate;\n            result.info.地铁状态 = v.rate > 0;\n            result.info.地铁比值 = Math.abs( v.rate );\n            result.value += v.traffic_value;\n            avg_sum += v.traffic_value_avg;\n          }\n          if(v.traffic_key === 'TAXI_COUNT'){\n            result.info.出租车 = v.traffic_value;\n          }\n          if(v.traffic_key === 'TAXI_ZKRC'){\n            result.info.出租车客运量 = v.traffic_value;\n            result.info.出租车比值 = v.rate;\n            result.info.出租车状态 = v.rate > 0;\n            result.info.出租车比值 = Math.abs( v.rate );\n            result.value += v.traffic_value;\n            avg_sum += v.traffic_value_avg;\n          }\n          if(v.traffic_key === 'BIKE_ZCLS'){\n            result.info.公共自行车 = v.traffic_value;\n          }\n          if(v.traffic_key === 'BIKE_LJKYL'){\n            result.info.公共自行车租用量 = v.traffic_value;\n            // result.info.公共自行车比值 = v.rate;\n            result.info.公共自行车比值 = 0 //应对陈高周一凌晨数据更新 自行车比率数据不对造成暴增 暂写死为0\n            result.info.公共自行车状态 = v.rate > 0;\n            result.info.公共自行车比值 = Math.abs( v.rate );\n            result.value += v.traffic_value;\n            avg_sum += v.traffic_value_avg;\n          }\n        })\n      // const bike_data = await ganjiang.request('/getPublicTravel_bike', {\n      //   grid_id: req.query.grid_id\n      // });\n      // result.value += bike_data.info.公共自行车租用量;\n      // avg_sum += bike_data.info.公共自行车均值\n      // result.info.公共自行车 = bike_data.info.公共自行车;\n      // result.info.公共自行车租用量 = bike_data.info.公共自行车租用量;\n      // result.info.公共自行车比值 = Math.abs(bike_data.info.公共自行车比值);\n      // result.info.公共自行车状态 = bike_data.info.公共自行车状态;\n      // result.info.公共自行车 = 9.36;\n      result.info.地铁里程 = 117.6;\n\n      if( avg_sum > 0 ){\n        result.rate = ((result.value - avg_sum) / avg_sum * 100).toFixed(0);\n      }  \n      result.state = result.rate > 0;\n      result.rate = Math.abs( result.rate );\n      result.value = result.value.toFixed(0);\n    }\n\n    const { getLongRedisKey, getRedisTimeList } = ganjiang.app_cfg\n    const { oldtime, longTime } = getRedisTimeList();\n    const longRedisKey = getLongRedisKey(redisKey);\n    //缓存数据\n    await ganjiang.redis.set(redisKey, result);\n    await ganjiang.redis.expire(redisKey, oldtime);\n\n    //提供较长的缓存时间，在正式缓存失效时候使用这个缓存数据\n    await ganjiang.redis.set(longRedisKey, result);\n    await ganjiang.redis.expire(longRedisKey, longTime);\n\n    return result;\n}  """

print ss